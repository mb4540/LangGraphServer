"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/panels/CodeTemplate.tsx":
/*!************************************************!*\
  !*** ./src/components/panels/CodeTemplate.tsx ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _store_graphStore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/store/graphStore */ \"(app-pages-browser)/./src/store/graphStore.ts\");\n\nvar _s = $RefreshSig$();\n\n\n// Function to format Python code with syntax highlighting\nconst formatPythonCode = (code)=>{\n    if (!code) return null;\n    // Split the code into lines\n    const lines = code.split(\"\\n\");\n    // Define regex patterns for different Python syntax elements\n    const patterns = {\n        keyword: /\\b(def|class|import|from|return|if|else|elif|for|while|try|except|finally|with|as|in|is|not|and|or|True|False|None|async|await|yield)\\b/g,\n        function: /\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*\\()/g,\n        string: /(['\"])(.*?)\\1/g,\n        comment: /#.*/g,\n        decorator: /@[a-zA-Z_][a-zA-Z0-9_\\.]*/g,\n        className: /\\b([A-Z][a-zA-Z0-9_]*)\\b/g,\n        number: /\\b\\d+(\\.\\d+)?\\b/g\n    };\n    // Process each line and apply highlighting\n    return lines.map((line, index)=>{\n        let highlightedLine = line;\n        // Apply syntax highlighting for each pattern\n        // We need to process comments first to avoid highlighting inside comments\n        highlightedLine = highlightedLine.replace(patterns.comment, '<span class=\"comment\">$&</span>');\n        // Then process strings to avoid highlighting keywords inside strings\n        highlightedLine = highlightedLine.replace(patterns.string, '<span class=\"string\">$&</span>');\n        // Process other syntax elements\n        highlightedLine = highlightedLine.replace(patterns.decorator, '<span class=\"decorator\">$&</span>');\n        highlightedLine = highlightedLine.replace(patterns.keyword, '<span class=\"keyword\">$&</span>');\n        highlightedLine = highlightedLine.replace(patterns.function, '<span class=\"function\">$&</span>');\n        highlightedLine = highlightedLine.replace(patterns.className, '<span class=\"class-name\">$&</span>');\n        highlightedLine = highlightedLine.replace(patterns.number, '<span class=\"number\">$&</span>');\n        // Return the line with line number\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n            className: \"line\",\n            dangerouslySetInnerHTML: {\n                __html: highlightedLine\n            }\n        }, index, false, {\n            fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n            lineNumber: 42,\n            columnNumber: 7\n        }, undefined);\n    });\n};\nconst CodeTemplate = ()=>{\n    _s();\n    const { nodes, edges, graphName } = (0,_store_graphStore__WEBPACK_IMPORTED_MODULE_2__.useGraph)();\n    const [code, setCode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    // Generate template code based on the current graph state\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        // This function will be called whenever the graph changes\n        const generateCode = ()=>{\n            // Start with the base template\n            let generatedCode = \"# Generated LangGraph code for: \".concat(graphName || \"Untitled Graph\", \"\\n\\n# Standard imports\\nimport json\\nimport asyncio\\nfrom typing import Dict, List, Any, TypedDict, Literal, Union, Annotated, Callable, Optional\\n\\n# LangGraph imports\\nfrom langgraph.graph import StateGraph\\nfrom langgraph.prebuilt import ToolNode, AgentNode\\nfrom langgraph.checkpoint import Checkpoint\\n\\n# Define the state schema with flexible structure for all node types\\nclass GraphState(TypedDict):\\n    input: str\\n    intermediate_steps: List[Any]\\n    output: str\\n    memory: Dict[str, Any]  # For Memory Read/Write nodes\\n    context: Dict[str, Any]  # For additional context storage\\n    tool_results: Dict[str, Any]  # For tool outputs\\n\\n# Initialize the graph\\ngraph = StateGraph(GraphState)\\n\\n\");\n            // Add node definitions based on the current graph\n            if (nodes.length > 0) {\n                generatedCode += \"# Node definitions\\n\";\n                // Sort nodes to ensure START nodes come first\n                const sortedNodes = [\n                    ...nodes\n                ].sort((a, b)=>{\n                    if (a.type === \"startNode\") return -1;\n                    if (b.type === \"startNode\") return 1;\n                    return 0;\n                });\n                sortedNodes.forEach((node)=>{\n                    const nodeId = node.id.replace(/-/g, \"_\");\n                    switch(node.type){\n                        case \"startNode\":\n                            generatedCode += '@graph.node(\"start\")\\ndef '.concat(nodeId, '(state: GraphState) -> Dict[str, Any]:\\n    \"\"\"').concat(node.data.label || \"Start node\", ' - Entry point of the graph\"\"\"\\n    # Initialize state if needed\\n    return {\"context\": {\"status\": \"Graph execution started\"}}\\n\\n');\n                            break;\n                        case \"endNode\":\n                            generatedCode += '@graph.node(\"end\")\\ndef '.concat(nodeId, '(state: GraphState) -> Dict[str, Any]:\\n    \"\"\"').concat(node.data.label || \"End node\", ' - Terminal node that marks completion\"\"\"\\n    # Format the final output\\n    return {\"final_output\": state.get(\"output\", \"No output\")}\\n\\n');\n                            break;\n                        case \"llmNode\":\n                            generatedCode += \"@graph.node\\ndef \".concat(nodeId, '(state: GraphState) -> Dict[str, Any]:\\n    \"\"\"').concat(node.data.label || \"LLM Node\", ' - Language model for text generation\"\"\"\\n    # Implement LLM call here\\n    # Using model: ').concat(node.data.modelName || \"default_model\", '\\n    return {\"output\": \"Generated text would appear here\"}\\n\\n');\n                            break;\n                        case \"toolNode\":\n                            generatedCode += \"@graph.node\\ndef \".concat(nodeId, '(state: GraphState) -> Dict[str, Any]:\\n    \"\"\"').concat(node.data.label || \"Tool Node\", ' - Executes a specific function\"\"\"\\n    # Implement tool call here\\n    # Function: ').concat(node.data.functionName || \"function_name\", '\\n    return {\"tool_results\": {\"result\": \"Tool execution result would appear here\"}}\\n\\n');\n                            break;\n                        case \"subgraphNode\":\n                            generatedCode += \"@graph.node\\ndef \".concat(nodeId, '(state: GraphState) -> Dict[str, Any]:\\n    \"\"\"').concat(node.data.label || \"Subgraph Node\", ' - Encapsulates another graph\"\"\"\\n    # Execute subgraph: ').concat(node.data.graphId || \"graph_id\", '\\n    # This would invoke another LangGraph workflow\\n    return {\"output\": \"Subgraph execution result would appear here\"}\\n\\n');\n                            break;\n                        default:\n                            generatedCode += \"@graph.node\\ndef \".concat(nodeId, '(state: GraphState) -> Dict[str, Any]:\\n    \"\"\"').concat(node.data.label || node.type, ' Node\"\"\"\\n    # Implementation for ').concat(node.type, \"\\n    return {}\\n\\n\");\n                    }\n                });\n            }\n            // Add edge definitions\n            if (edges.length > 0) {\n                generatedCode += \"# Edge definitions\\n\";\n                edges.forEach((edge)=>{\n                    const sourceId = edge.source.replace(/-/g, \"_\");\n                    const targetId = edge.target.replace(/-/g, \"_\");\n                    if (edge.sourceHandle) {\n                        generatedCode += \"graph.add_conditional_edges(\\n    \".concat(sourceId, ',\\n    lambda state: \"').concat(edge.sourceHandle, '\",\\n    {\\n        \"').concat(edge.sourceHandle, '\": ').concat(targetId, \"\\n    }\\n)\\n\");\n                    } else {\n                        generatedCode += \"graph.add_edge(\".concat(sourceId, \", \").concat(targetId, \")\\n\");\n                    }\n                });\n                generatedCode += \"\\n\";\n            }\n            // Add compilation and execution code\n            generatedCode += '# Compile the graph\\napp = graph.compile()\\n\\n# Function to run the graph\\ndef run_graph(input_text: str) -> Dict[str, Any]:\\n    \"\"\"Run the graph with the given input\"\"\"\\n    result = app.invoke({\"input\": input_text})\\n    return result\\n\\n# Example usage\\nif __name__ == \"__main__\":\\n    result = run_graph(\"Hello, world!\")\\n    print(f\"Result: {result}\")\\n';\n            return generatedCode;\n        };\n        setCode(generateCode());\n    }, [\n        nodes,\n        edges,\n        graphName\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"h-full flex flex-col\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mb-4\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                        className: \"text-lg font-bold\",\n                        children: \"Code Template\"\n                    }, void 0, false, {\n                        fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                        lineNumber: 213,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm text-gray-600\",\n                        children: \"This code template updates as you build your graph. Copy it to use in your own projects.\"\n                    }, void 0, false, {\n                        fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                        lineNumber: 214,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                lineNumber: 212,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex-grow overflow-auto custom-scrollbar border border-gray-200 rounded-md\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"pre\", {\n                    className: \"p-4 m-0 h-full bg-gray-50 text-sm font-mono whitespace-pre overflow-auto python-code\",\n                    children: formatPythonCode(code)\n                }, void 0, false, {\n                    fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                    lineNumber: 220,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                lineNumber: 219,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-4 flex justify-end\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                    onClick: ()=>navigator.clipboard.writeText(code),\n                    className: \"px-4 py-1.5 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\",\n                    children: \"Copy to Clipboard\"\n                }, void 0, false, {\n                    fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                    lineNumber: 226,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n                lineNumber: 225,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/home/mike/CascadeProjects/LangGraphServer/src/components/panels/CodeTemplate.tsx\",\n        lineNumber: 211,\n        columnNumber: 5\n    }, undefined);\n};\n_s(CodeTemplate, \"tV7r/lkZsgZm4nYkWUttRI91P7E=\", false, function() {\n    return [\n        _store_graphStore__WEBPACK_IMPORTED_MODULE_2__.useGraph\n    ];\n});\n_c = CodeTemplate;\n/* harmony default export */ __webpack_exports__[\"default\"] = (CodeTemplate);\nvar _c;\n$RefreshReg$(_c, \"CodeTemplate\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/panels/CodeTemplate.tsx\n"));

/***/ })

});