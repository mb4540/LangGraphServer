"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/utils/schemaUtils.ts":
/*!**********************************!*\
  !*** ./src/utils/schemaUtils.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agentNodeSchema: function() { return /* binding */ agentNodeSchema; },\n/* harmony export */   baseNodeSchema: function() { return /* binding */ baseNodeSchema; },\n/* harmony export */   customNodeSchema: function() { return /* binding */ customNodeSchema; },\n/* harmony export */   decisionNodeSchema: function() { return /* binding */ decisionNodeSchema; },\n/* harmony export */   edgeSchema: function() { return /* binding */ edgeSchema; },\n/* harmony export */   endNodeSchema: function() { return /* binding */ endNodeSchema; },\n/* harmony export */   errorRetryNodeSchema: function() { return /* binding */ errorRetryNodeSchema; },\n/* harmony export */   getEdgeSchema: function() { return /* binding */ getEdgeSchema; },\n/* harmony export */   getSchemaForNodeType: function() { return /* binding */ getSchemaForNodeType; },\n/* harmony export */   humanPauseNodeSchema: function() { return /* binding */ humanPauseNodeSchema; },\n/* harmony export */   loopNodeSchema: function() { return /* binding */ loopNodeSchema; },\n/* harmony export */   memoryReadNodeSchema: function() { return /* binding */ memoryReadNodeSchema; },\n/* harmony export */   memoryWriteNodeSchema: function() { return /* binding */ memoryWriteNodeSchema; },\n/* harmony export */   nodeTypeToSchema: function() { return /* binding */ nodeTypeToSchema; },\n/* harmony export */   parallelForkNodeSchema: function() { return /* binding */ parallelForkNodeSchema; },\n/* harmony export */   parallelJoinNodeSchema: function() { return /* binding */ parallelJoinNodeSchema; },\n/* harmony export */   predicateSchema: function() { return /* binding */ predicateSchema; },\n/* harmony export */   startNodeSchema: function() { return /* binding */ startNodeSchema; },\n/* harmony export */   subgraphNodeSchema: function() { return /* binding */ subgraphNodeSchema; },\n/* harmony export */   timeoutGuardNodeSchema: function() { return /* binding */ timeoutGuardNodeSchema; },\n/* harmony export */   toolNodeSchema: function() { return /* binding */ toolNodeSchema; },\n/* harmony export */   validateEdgeConnection: function() { return /* binding */ validateEdgeConnection; }\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(app-pages-browser)/./node_modules/zod/lib/index.mjs\");\n\n// Base node data schema that all nodes will extend\nconst baseNodeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    label: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Label is required\"),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// ============ CORE STRUCTURAL NODES ============\n// START Node Schema - Required entry point for all graphs\nconst startNodeSchema = baseNodeSchema.extend({\n    initialState: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.any()).optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"Entry point of the graph\")\n});\n// END Node Schema - Terminal sink that marks successful completion\nconst endNodeSchema = baseNodeSchema.extend({\n    outputFormat: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"json\",\n        \"text\",\n        \"markdown\"\n    ]).default(\"text\"),\n    finalTransform: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"Terminal node that marks completion\")\n});\n// ============ PRIMITIVE EXECUTION NODES ============\n// Agent Node Schema - Wraps an LLM or ReAct agent that can call tools\nconst agentNodeSchema = baseNodeSchema.extend({\n    agentType: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"llm\",\n        \"react\",\n        \"planAndExecute\"\n    ]).default(\"llm\"),\n    modelName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Model name is required\"),\n    temperature: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(1).default(0.7),\n    maxTokens: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().max(32000).optional(),\n    systemPrompt: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    stopCondition: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    outputParser: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// Tool Node Schema - Executes tool calls with built-in concurrency & error handling\nconst toolNodeSchema = baseNodeSchema.extend({\n    modulePath: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Module path is required\"),\n    functionName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Function name is required\"),\n    argsSchema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    timeout: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().optional(),\n    concurrency: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).max(50).default(1),\n    errorHandling: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"fail\",\n        \"ignore\",\n        \"retry\"\n    ]).default(\"fail\"),\n    maxRetries: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(1).max(10).default(3).optional()\n});\n// Memory Read Node Schema - Reads from short-term or long-term memory\nconst memoryReadNodeSchema = baseNodeSchema.extend({\n    memoryType: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"short_term\",\n        \"long_term\"\n    ]).default(\"short_term\"),\n    key: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    namespace: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    ttl: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().optional(),\n    filter: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// Memory Write Node Schema - Writes to short-term or long-term memory\nconst memoryWriteNodeSchema = baseNodeSchema.extend({\n    memoryType: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"short_term\",\n        \"long_term\"\n    ]).default(\"short_term\"),\n    key: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    namespace: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    ttl: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().optional(),\n    storageFormat: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"json\",\n        \"text\",\n        \"binary\"\n    ]).default(\"json\"),\n    overwriteExisting: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true)\n});\n// ============ CONTROL-FLOW / ORCHESTRATION NODES ============\n// Decision Node Schema - Routes to one of several branches based on a predicate\n// Define predicate schema for advanced routing\nconst predicateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Predicate name is required\"),\n    expression: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Expression is required\"),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst decisionNodeSchema = baseNodeSchema.extend({\n    evaluationMode: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"simple\",\n        \"advanced\"\n    ]).default(\"simple\"),\n    // For simple mode\n    condition: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Condition is required\").optional().superRefine((val, ctx)=>{\n        // Only validate if in simple mode\n        if (ctx.parent.evaluationMode === \"simple\" && !val) {\n            ctx.addIssue({\n                code: zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodIssueCode.custom,\n                message: \"Condition is required in simple mode\"\n            });\n        }\n    }),\n    branches: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional().superRefine((val, ctx)=>{\n        // Only validate if in simple mode\n        if (ctx.parent.evaluationMode === \"simple\") {\n            if (!val || val.length < 2) {\n                ctx.addIssue({\n                    code: zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodIssueCode.custom,\n                    message: \"At least two branches are required in simple mode\"\n                });\n            }\n        }\n    }),\n    // For advanced mode\n    predicates: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(predicateSchema).optional().superRefine((val, ctx)=>{\n        // Only validate if in advanced mode\n        if (ctx.parent.evaluationMode === \"advanced\") {\n            if (!val || val.length < 1) {\n                ctx.addIssue({\n                    code: zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodIssueCode.custom,\n                    message: \"At least one predicate is required in advanced mode\"\n                });\n            }\n            // Check for duplicate predicate names\n            if (val) {\n                const names = val.map((p)=>p.name);\n                const uniqueNames = new Set(names);\n                if (names.length !== uniqueNames.size) {\n                    ctx.addIssue({\n                        code: zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodIssueCode.custom,\n                        message: \"Predicate names must be unique\"\n                    });\n                }\n            }\n        }\n    }),\n    defaultBranch: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// Parallel Fork Node Schema - Fans out to concurrent branches\nconst parallelForkNodeSchema = baseNodeSchema.extend({\n    minBranches: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(2).default(2),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"Splits execution into parallel branches\")\n});\n// Parallel Join Node Schema - Waits for and merges incoming branches\nconst parallelJoinNodeSchema = baseNodeSchema.extend({\n    mergeStrategy: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"concat\",\n        \"merge\",\n        \"custom\"\n    ]).default(\"merge\"),\n    customMerger: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    waitForAll: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true)\n});\n// Loop Node Schema - Creates cyclic edges until condition routes elsewhere\nconst loopNodeSchema = baseNodeSchema.extend({\n    condition: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Loop condition is required\"),\n    maxIterations: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().default(10),\n    collectionKey: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    iteratorKey: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// Error-Retry Node Schema - Re-invokes previous node with configurable policy\nconst errorRetryNodeSchema = baseNodeSchema.extend({\n    maxRetries: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().default(3),\n    backoffType: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"constant\",\n        \"linear\",\n        \"exponential\"\n    ]).default(\"exponential\"),\n    initialDelayMs: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().default(1000),\n    maxDelayMs: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().default(30000),\n    jitter: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true)\n});\n// Timeout Guard Node Schema - Interrupts long-running nodes after threshold\nconst timeoutGuardNodeSchema = baseNodeSchema.extend({\n    timeoutMs: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().min(1000).default(60000),\n    onTimeout: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"error\",\n        \"default\",\n        \"abort\"\n    ]).default(\"error\"),\n    defaultResult: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    heartbeatIntervalMs: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().optional()\n});\n// Human-Pause Node Schema - Pauses for human review/intervention\nconst humanPauseNodeSchema = baseNodeSchema.extend({\n    pauseMessage: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"Waiting for human input\"),\n    timeoutMs: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive().optional(),\n    requiredFields: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    allowEdits: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true)\n});\n// Sub-graph Node Schema - Encapsulates an entire graph as a single node\nconst subgraphNodeSchema = baseNodeSchema.extend({\n    graphId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Graph ID is required\"),\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"latest\"),\n    inputMapping: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    outputMapping: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\n// Custom Node Schema - For any generic Python/JS function\nconst customNodeSchema = baseNodeSchema.extend({\n    functionBody: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Function body is required\"),\n    inputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    outputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    language: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"python\",\n        \"javascript\"\n    ]).default(\"python\")\n});\n// Edge Schema with enhanced connection types\nconst edgeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    // Basic edge properties\n    condition: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        \"always\",\n        \"success\",\n        \"failure\",\n        \"custom\"\n    ]).default(\"always\"),\n    customCondition: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    animated: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true),\n    // Props for conditional edges from decision nodes\n    branch: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    priority: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().min(0).optional(),\n    // Props for parallel fork/join edges\n    parallelBranch: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n    // Props for retry policy\n    isRetryEdge: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\n// Map of node types to their schemas\nconst nodeTypeToSchema = {\n    startNode: startNodeSchema,\n    endNode: endNodeSchema,\n    agentNode: agentNodeSchema,\n    toolNode: toolNodeSchema,\n    memoryReadNode: memoryReadNodeSchema,\n    memoryWriteNode: memoryWriteNodeSchema,\n    decisionNode: decisionNodeSchema,\n    parallelForkNode: parallelForkNodeSchema,\n    parallelJoinNode: parallelJoinNodeSchema,\n    loopNode: loopNodeSchema,\n    errorRetryNode: errorRetryNodeSchema,\n    timeoutGuardNode: timeoutGuardNodeSchema,\n    humanPauseNode: humanPauseNodeSchema,\n    subgraphNode: subgraphNodeSchema,\n    customNode: customNodeSchema\n};\n// Function to get the schema for a node type\nfunction getSchemaForNodeType(nodeType) {\n    return nodeTypeToSchema[nodeType] || baseNodeSchema;\n}\n// Function to get the schema for an edge\nfunction getEdgeSchema() {\n    return edgeSchema;\n}\n// Edge validation rules\nfunction validateEdgeConnection(sourceType, targetType) {\n    // START nodes must not be the target of any edge\n    if (targetType === \"startNode\") {\n        return false; // START nodes cannot have incoming edges\n    }\n    // START node can connect to any node type except itself\n    if (sourceType === \"startNode\") {\n        return targetType !== \"startNode\"; // Prevent self-loops\n    }\n    // END node cannot have outgoing edges\n    if (sourceType === \"endNode\") {\n        return false;\n    }\n    // Parallel Fork must have at least two outgoing edges\n    // This is handled in the graph validation logic, not in this edge validation function\n    // Parallel Join must have at least two incoming edges\n    // This is handled in the graph validation logic, not in this edge validation function\n    // All other connections are allowed by default\n    return true;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/schemaUtils.ts\n"));

/***/ })

});