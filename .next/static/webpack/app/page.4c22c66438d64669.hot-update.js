"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/store/graphStore.ts":
/*!*********************************!*\
  !*** ./src/store/graphStore.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EdgeCondition: function() { return /* binding */ EdgeCondition; },\n/* harmony export */   NodeType: function() { return /* binding */ NodeType; },\n/* harmony export */   useGraph: function() { return /* binding */ useGraph; },\n/* harmony export */   useGraphStore: function() { return /* binding */ useGraphStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var _utils_schemaUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/schemaUtils */ \"(app-pages-browser)/./src/utils/schemaUtils.ts\");\n\n\n\n// Helper function to detect cycles in the graph\n// Used for validating Loop nodes\nfunction hasCycleToNode(targetNodeId, edges) {\n    let visited = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : new Set(), path = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : new Set(), currentNode = arguments.length > 4 ? arguments[4] : void 0;\n    // If no current node is specified, we need to check all possible starting points\n    if (!currentNode) {\n        // Get all nodes that have edges targeting our loop node\n        const sourcesToTarget = edges.filter((e)=>e.target === targetNodeId).map((e)=>e.source);\n        // For each potential starting point, check if there's a path back to the target\n        for (const source of sourcesToTarget){\n            if (hasCycleToNode(targetNodeId, edges, new Set(), new Set(), source)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    // If we've already visited this node in the current path, we found a cycle\n    if (path.has(currentNode)) {\n        return true;\n    }\n    // If we've already visited this node in another path, no need to check again\n    if (visited.has(currentNode)) {\n        return false;\n    }\n    // Mark the current node as visited and add it to the current path\n    visited.add(currentNode);\n    path.add(currentNode);\n    // Check all outgoing edges from the current node\n    const outgoingEdges = edges.filter((e)=>e.source === currentNode);\n    for (const edge of outgoingEdges){\n        // If we find a direct edge back to our target, we found a cycle\n        if (edge.target === targetNodeId) {\n            return true;\n        }\n        // Otherwise, continue searching from the target of this edge\n        if (hasCycleToNode(targetNodeId, edges, visited, path, edge.target)) {\n            return true;\n        }\n    }\n    // Remove the current node from the path as we backtrack\n    path.delete(currentNode);\n    return false;\n}\nvar NodeType;\n(function(NodeType) {\n    NodeType[\"START\"] = \"startNode\";\n    NodeType[\"END\"] = \"endNode\";\n    NodeType[\"AGENT\"] = \"agentNode\";\n    NodeType[\"TOOL\"] = \"toolNode\";\n    NodeType[\"MEMORY_READ\"] = \"memoryReadNode\";\n    NodeType[\"MEMORY_WRITE\"] = \"memoryWriteNode\";\n    NodeType[\"DECISION\"] = \"decisionNode\";\n    NodeType[\"PARALLEL_FORK\"] = \"parallelForkNode\";\n    NodeType[\"PARALLEL_JOIN\"] = \"parallelJoinNode\";\n    NodeType[\"LOOP\"] = \"loopNode\";\n    NodeType[\"ERROR_RETRY\"] = \"errorRetryNode\";\n    NodeType[\"TIMEOUT_GUARD\"] = \"timeoutGuardNode\";\n    NodeType[\"HUMAN_PAUSE\"] = \"humanPauseNode\";\n    NodeType[\"SUBGRAPH\"] = \"subgraphNode\";\n    NodeType[\"CUSTOM\"] = \"customNode\";\n})(NodeType || (NodeType = {}));\nvar EdgeCondition;\n(function(EdgeCondition) {\n    EdgeCondition[\"ALWAYS\"] = \"always\";\n    EdgeCondition[\"SUCCESS\"] = \"success\";\n    EdgeCondition[\"FAILURE\"] = \"failure\";\n    EdgeCondition[\"CUSTOM\"] = \"custom\";\n})(EdgeCondition || (EdgeCondition = {}));\n// Error messages for validation\nconst ERROR_MESSAGES = {\n    START_NODE_EXISTS: \"A graph can only have one START node\",\n    INVALID_CONNECTION: \"This connection is not allowed\",\n    START_REQUIRED: \"A graph must have a START node\",\n    START_NO_INCOMING: \"START nodes cannot have incoming edges\",\n    START_ONE_OUTGOING: \"START node must have exactly one outgoing edge\",\n    END_REQUIRED: \"A graph must have at least one END node\",\n    EDGE_FROM_END: \"END nodes cannot have outgoing edges\",\n    DUPLICATE_EDGE: \"This connection already exists\",\n    SELF_CONNECTION: \"A node cannot connect to itself\",\n    PARALLEL_FORK_MIN_EDGES: \"Parallel Fork nodes must have at least 2 outgoing edges\",\n    PARALLEL_JOIN_MIN_EDGES: \"Parallel Join nodes must have at least 2 incoming edges\",\n    LOOP_CYCLE_REQUIRED: \"Loop nodes must have a cycle\"\n};\n// Create the store\nconst useGraphStore = (0,zustand__WEBPACK_IMPORTED_MODULE_1__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.persist)((set, get)=>({\n        // Initial state\n        nodes: [],\n        edges: [],\n        selectedNodeId: null,\n        selectedEdgeId: null,\n        graphName: \"Untitled Graph\",\n        error: null,\n        isValid: true,\n        // Actions\n        setNodes: (nodes)=>set({\n                nodes\n            }),\n        setEdges: (edges)=>set({\n                edges\n            }),\n        // Validate and add a new node\n        addNode: (node)=>{\n            // Check if we're adding a START node when one already exists\n            if (node.type === \"startNode\" && get().nodes.some((n)=>n.type === \"startNode\")) {\n                set({\n                    error: ERROR_MESSAGES.START_NODE_EXISTS\n                });\n                return;\n            }\n            set((state)=>({\n                    nodes: [\n                        ...state.nodes,\n                        node\n                    ],\n                    error: null\n                }));\n            // Revalidate the graph after adding a node\n            const { valid, message } = get().validateGraph();\n            set({\n                isValid: valid,\n                error: valid ? null : message || null\n            });\n        },\n        // Update node data\n        updateNode: (id, data)=>set((state)=>{\n                const updatedNodes = state.nodes.map((node)=>node.id === id ? {\n                        ...node,\n                        ...data\n                    } : node);\n                // Revalidate the graph after updating a node\n                const newState = {\n                    nodes: updatedNodes\n                };\n                const { valid, message } = get().validateGraph();\n                return {\n                    ...newState,\n                    isValid: valid,\n                    error: valid ? null : message || null\n                };\n            }),\n        // Remove a node and all connected edges\n        removeNode: (id)=>set((state)=>{\n                const newState = {\n                    nodes: state.nodes.filter((node)=>node.id !== id),\n                    edges: state.edges.filter((edge)=>edge.source !== id && edge.target !== id),\n                    // Clear selection if the removed node was selected\n                    selectedNodeId: state.selectedNodeId === id ? null : state.selectedNodeId\n                };\n                // Revalidate the graph after removing a node\n                const { valid, message } = get().validateGraph();\n                return {\n                    ...newState,\n                    isValid: valid,\n                    error: valid ? null : message || null\n                };\n            }),\n        // Validate edge before adding\n        canAddEdge: (source, target)=>{\n            const state = get();\n            const sourceNode = state.nodes.find((n)=>n.id === source);\n            const targetNode = state.nodes.find((n)=>n.id === target);\n            if (!sourceNode || !targetNode) {\n                return {\n                    valid: false,\n                    message: \"Source or target node not found\"\n                };\n            }\n            // Self-connections are not allowed\n            if (source === target) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.SELF_CONNECTION\n                };\n            }\n            // END nodes cannot have outgoing edges\n            if (sourceNode.type === \"endNode\") {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.EDGE_FROM_END\n                };\n            }\n            // Check if this edge already exists\n            if (state.edges.some((e)=>e.source === source && e.target === target)) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.DUPLICATE_EDGE\n                };\n            }\n            // Check type-specific connection rules\n            if (!(0,_utils_schemaUtils__WEBPACK_IMPORTED_MODULE_0__.validateEdgeConnection)(sourceNode.type, targetNode.type)) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.INVALID_CONNECTION\n                };\n            }\n            return {\n                valid: true\n            };\n        },\n        // Add edge with validation\n        addEdge: (edge)=>{\n            const { valid, message } = get().canAddEdge(edge.source, edge.target);\n            if (!valid) {\n                set({\n                    error: message || ERROR_MESSAGES.INVALID_CONNECTION\n                });\n                return;\n            }\n            set((state)=>({\n                    edges: [\n                        ...state.edges,\n                        edge\n                    ],\n                    error: null\n                }));\n            // Revalidate the graph after adding an edge\n            const validationResult = get().validateGraph();\n            set({\n                isValid: validationResult.valid,\n                error: validationResult.valid ? null : validationResult.message || null\n            });\n        },\n        // Update edge data\n        updateEdge: (id, data)=>set((state)=>{\n                const updatedEdges = state.edges.map((edge)=>edge.id === id ? {\n                        ...edge,\n                        ...data\n                    } : edge);\n                return {\n                    edges: updatedEdges\n                };\n            }),\n        // Remove an edge\n        removeEdge: (id)=>set((state)=>{\n                const newState = {\n                    edges: state.edges.filter((edge)=>edge.id !== id),\n                    // Clear selection if the removed edge was selected\n                    selectedEdgeId: state.selectedEdgeId === id ? null : state.selectedEdgeId\n                };\n                // Revalidate the graph after removing an edge\n                const { valid, message } = get().validateGraph();\n                return {\n                    ...newState,\n                    isValid: valid,\n                    error: valid ? null : message || null\n                };\n            }),\n        // Set selected node ID\n        setSelectedNodeId: (id)=>set({\n                selectedNodeId: id,\n                // Deselect edge when selecting a node\n                selectedEdgeId: null\n            }),\n        // Set selected edge ID\n        setSelectedEdgeId: (id)=>set({\n                selectedEdgeId: id,\n                // Deselect node when selecting an edge\n                selectedNodeId: null\n            }),\n        // Set graph name\n        setGraphName: (graphName)=>set({\n                graphName\n            }),\n        // Clear the entire graph\n        clearGraph: ()=>set({\n                nodes: [],\n                edges: [],\n                selectedNodeId: null,\n                selectedEdgeId: null,\n                graphName: \"Untitled Graph\",\n                error: null,\n                isValid: true\n            }),\n        // Validate the entire graph\n        validateGraph: ()=>{\n            const state = get();\n            // Check if there's exactly one START node\n            const startNodes = state.nodes.filter((n)=>n.type === \"startNode\");\n            if (startNodes.length === 0) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.START_REQUIRED\n                };\n            }\n            if (startNodes.length > 1) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.START_NODE_EXISTS\n                };\n            }\n            // Validate START node has exactly one outgoing edge and no incoming edges\n            const startNodeId = startNodes[0].id;\n            const startNodeOutgoingEdges = state.edges.filter((e)=>e.source === startNodeId);\n            const startNodeIncomingEdges = state.edges.filter((e)=>e.target === startNodeId);\n            if (startNodeOutgoingEdges.length !== 1) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.START_ONE_OUTGOING\n                };\n            }\n            if (startNodeIncomingEdges.length > 0) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.START_NO_INCOMING\n                };\n            }\n            // Validate no outgoing edges from END nodes\n            const endNodeIds = state.nodes.filter((n)=>n.type === \"endNode\").map((n)=>n.id);\n            const endNodeOutgoingEdges = state.edges.filter((e)=>endNodeIds.includes(e.source));\n            if (endNodeOutgoingEdges.length > 0) {\n                return {\n                    valid: false,\n                    message: ERROR_MESSAGES.EDGE_FROM_END\n                };\n            }\n            // Validate Parallel Fork nodes have at least 2 outgoing edges\n            const parallelForkNodes = state.nodes.filter((n)=>n.type === \"parallelForkNode\");\n            for (const forkNode of parallelForkNodes){\n                const outgoingEdges = state.edges.filter((e)=>e.source === forkNode.id);\n                if (outgoingEdges.length < 2) {\n                    return {\n                        valid: false,\n                        message: ERROR_MESSAGES.PARALLEL_FORK_MIN_EDGES\n                    };\n                }\n            }\n            // Validate Parallel Join nodes have at least 2 incoming edges\n            const parallelJoinNodes = state.nodes.filter((n)=>n.type === \"parallelJoinNode\");\n            for (const joinNode of parallelJoinNodes){\n                const incomingEdges = state.edges.filter((e)=>e.target === joinNode.id);\n                if (incomingEdges.length < 2) {\n                    return {\n                        valid: false,\n                        message: ERROR_MESSAGES.PARALLEL_JOIN_MIN_EDGES\n                    };\n                }\n            }\n            // Validate Loop nodes have at least one cycle\n            const loopNodes = state.nodes.filter((n)=>n.type === \"loopNode\");\n            for (const loopNode of loopNodes){\n                // Find if there's a path back to this loop node\n                const hasCycle = hasCycleToNode(loopNode.id, state.edges);\n                if (!hasCycle) {\n                    return {\n                        valid: false,\n                        message: ERROR_MESSAGES.LOOP_CYCLE_REQUIRED\n                    };\n                }\n            }\n            return {\n                valid: true\n            };\n        },\n        // Set error message\n        setError: (error)=>set({\n                error\n            }),\n        // Add a new branch to a decision node\n        addDecisionBranch: (nodeId, branchName)=>set((state)=>{\n                const node = state.nodes.find((n)=>n.id === nodeId);\n                if (!node || node.type !== \"decisionNode\") return state;\n                // Update the node's branches array\n                const updatedNodes = state.nodes.map((n)=>{\n                    if (n.id === nodeId) {\n                        const currentBranches = n.data.branches || [];\n                        return {\n                            ...n,\n                            data: {\n                                ...n.data,\n                                branches: [\n                                    ...currentBranches,\n                                    branchName\n                                ]\n                            }\n                        };\n                    }\n                    return n;\n                });\n                return {\n                    nodes: updatedNodes\n                };\n            }),\n        // Remove a branch from a decision node\n        removeDecisionBranch: (nodeId, branchIndex)=>set((state)=>{\n                const node = state.nodes.find((n)=>n.id === nodeId);\n                if (!node || node.type !== \"decisionNode\") return state;\n                // Update the node's branches array\n                const updatedNodes = state.nodes.map((n)=>{\n                    if (n.id === nodeId && n.data.branches) {\n                        const branches = [\n                            ...n.data.branches\n                        ];\n                        branches.splice(branchIndex, 1);\n                        return {\n                            ...n,\n                            data: {\n                                ...n.data,\n                                branches\n                            }\n                        };\n                    }\n                    return n;\n                });\n                return {\n                    nodes: updatedNodes\n                };\n            }),\n        // Add a cycle connection for a loop node\n        addLoopCycle: (loopNodeId, targetNodeId)=>set((state)=>{\n                // Create a new edge from target to loop node to create a cycle\n                const newEdge = {\n                    id: \"edge-\".concat(loopNodeId, \"-\").concat(targetNodeId, \"-cycle\"),\n                    source: targetNodeId,\n                    target: loopNodeId,\n                    animated: true,\n                    data: {\n                        condition: \"always\"\n                    }\n                };\n                return {\n                    edges: [\n                        ...state.edges,\n                        newEdge\n                    ]\n                };\n            }),\n        // Set a node's parent (for subgraphs)\n        setNodeParent: (nodeId, parentId)=>set((state)=>{\n                const updatedNodes = state.nodes.map((n)=>{\n                    if (n.id === nodeId) {\n                        return {\n                            ...n,\n                            parentNode: parentId || undefined,\n                            // Increase zIndex when node is nested\n                            zIndex: parentId ? 10 : undefined\n                        };\n                    }\n                    return n;\n                });\n                return {\n                    nodes: updatedNodes\n                };\n            })\n    }), {\n    name: \"langgraph-storage\"\n}));\n/* harmony default export */ __webpack_exports__[\"default\"] = (useGraphStore);\n// Custom hook to access graph data conveniently\nconst useGraph = ()=>{\n    const nodes = useGraphStore((state)=>state.nodes);\n    const edges = useGraphStore((state)=>state.edges);\n    const graphName = useGraphStore((state)=>state.graphName);\n    return {\n        nodes,\n        edges,\n        graphName\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/store/graphStore.ts\n"));

/***/ })

});